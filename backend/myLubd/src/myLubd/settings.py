"""
Django settings for myLubd project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta

# Base directory
BASE_DIR = Path(__file__).resolve().parent.parent




# Security
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'your-default-secret-key')
DEBUG = os.getenv('DEBUG', 'True') in ('True', '1', 'true', 'yes')
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Hosts and Security Settings
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    
    '[::1]',
    'pcms.live',
    'www.pcms.live',
    'django-backend',
    
     'backend',
       # Temporarily add this for debugging
]
# Google OAuth Settings
GOOGLE_CLIENT_ID = os.environ.get('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = os.environ.get('GOOGLE_CLIENT_SECRET')

# OAuth2 settings
OAUTH2_SETTINGS = {
    'GOOGLE': {
        'client_id': GOOGLE_CLIENT_ID,
        'client_secret': GOOGLE_CLIENT_SECRET,
        'auth_uri': 'https://accounts.google.com/o/oauth2/auth',
        'token_uri': 'https://oauth2.googleapis.com/token',
        'userinfo_uri': 'https://www.googleapis.com/oauth2/v3/userinfo',
    }
}

# Applications
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'myappLubd',
    'corsheaders',
    'rest_framework_simplejwt',
    'django_filters'
]

# Conditionally add optional packages if available
if DEBUG:
    try:
        import debug_toolbar
        INSTALLED_APPS.append('debug_toolbar')
    except ImportError:
        pass

try:
    import dbbackup
    INSTALLED_APPS.append('dbbackup')
except ImportError:
    pass

# Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',  # Move this up
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Conditionally add debug_toolbar middleware if available and in debug mode
if DEBUG:
    try:
        import debug_toolbar
        MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')
    except ImportError:
        pass

# URLs and WSGI
ROOT_URLCONF = 'myLubd.urls'
WSGI_APPLICATION = 'myLubd.wsgi.application'

# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mylubd_db',
        'USER': 'mylubd_user',
        'PASSWORD': 'Sqreele1234',
        'HOST': 'db',
        'PORT': '5432',
    }
}

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'myappLubd.auth.Auth0JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # Enforce authentication for all endpoints
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
}

# Auth0 configuration (set via environment variables)
# Support multiple env var names and sensible fallbacks
_raw_auth0_audience = os.getenv('AUTH0_AUDIENCE')

def _normalize_auth0_audience(aud: str | None) -> str | None:
    if not aud:
        return None
    value = aud.strip().rstrip('/')
    # Fix common misconfiguration where base domain is used without /api
    if value in ('https://pcms.live', 'http://pcms.live', 'https://www.pcms.live'):
        return 'https://pcms.live/api'
    if value.endswith('/api'):
        return value
    try:
        from urllib.parse import urlparse
        host = urlparse(value).netloc
        path = urlparse(value).path
        if host.endswith('pcms.live') and (path == '' or path == '/'):
            return f"{value}/api"
    except Exception:
        pass
    return value

AUTH0_AUDIENCE = _normalize_auth0_audience(_raw_auth0_audience)

_auth0_domain = os.getenv('AUTH0_DOMAIN')
_auth0_issuer = os.getenv('AUTH0_ISSUER') or os.getenv('AUTH0_ISSUER_BASE_URL')

if not _auth0_domain and _auth0_issuer:
    try:
        from urllib.parse import urlparse
        _parsed = urlparse(_auth0_issuer)
        _auth0_domain = (_parsed.netloc or _auth0_issuer).replace('https://', '').replace('http://', '').strip('/')
    except Exception:
        _auth0_domain = (_auth0_issuer or '').replace('https://', '').replace('http://', '').strip('/') or None

AUTH0_DOMAIN = _auth0_domain
AUTH0_ISSUER = _auth0_issuer or (f"https://{AUTH0_DOMAIN}/" if AUTH0_DOMAIN else None)

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'SIGNING_KEY': SECRET_KEY,  # Use Django's SECRET_KEY for JWT signing
    'VERIFYING_KEY': None,  # Use symmetric signing
    'ALGORITHM': 'HS256',  # Use HMAC with SHA-256
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    'JTI_CLAIM': 'jti',  # JWT ID claim
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
    'UPDATE_LAST_LOGIN': True,  # Update last login time
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
}

# CORS and CSRF

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# CSRF Configuration
if DEBUG:
    # In development, disable CSRF for easier testing
    CSRF_COOKIE_SECURE = False
    CSRF_COOKIE_HTTPONLY = False
    CSRF_USE_SESSIONS = False
    # Optionally disable CSRF middleware entirely in development
    # MIDDLEWARE = [m for m in MIDDLEWARE if m != 'django.middleware.csrf.CsrfViewMiddleware']
else:
    # Production CSRF settings
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True
    CSRF_USE_SESSIONS = True

# Static and Media Files
STATIC_URL = '/static/'
STATIC_ROOT = '/app/static'

MEDIA_URL = '/media/'
MEDIA_ROOT = '/app/media'
# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG' if DEBUG else 'WARNING',
    },
    'django': {
        'handlers': ['console'],
        'level': 'DEBUG' if DEBUG else 'ERROR',
        'propagate': False,
    },
}

# Email configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False') == 'True'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'no-reply@pcms.live')
SERVER_EMAIL = os.getenv('SERVER_EMAIL', DEFAULT_FROM_EMAIL)

# Base URL for links in emails (frontend site)
FRONTEND_BASE_URL = os.getenv('FRONTEND_BASE_URL', 'https://pcms.live')

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Bangkok'
USE_I18N = True
USE_TZ = True

# Default Primary Key Field Type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# File Uploads
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5MB

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
     "https://pcms.live",
    "https://www.pcms.live",
   "http://nextjs-frontend:3000",
    
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
      "https://pcms.live",
    "https://www.pcms.live",
    "http://nextjs-frontend:3000",
     
]
CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']

# Add these CORS settings

CORS_ORIGIN_ALLOW_ALL = False
CORS_PREFLIGHT_MAX_AGE = 86400
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB in bytes
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760
DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': '/root/my_project/backend/backups/'}
DBBACKUP_CLEANUP_KEEP = 7
MEDIABACKUP_CLEANUP_KEEP = 7
