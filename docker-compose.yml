version: '3.8'
services:
  frontend:
    build:
      context: ./frontend/Lastnext
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://pcms.live}
        - NEXT_PRIVATE_API_URL=${NEXT_PRIVATE_API_URL:-http://backend:8000}
        - API_URL=${API_URL:-http://backend:8000}
        - APP_BASE_URL=${APP_BASE_URL:-https://pcms.live}
        - APP_BASE_URL=${APP_BASE_URL:-https://pcms.live}
        - AUTH0_BASE_URL=${AUTH0_BASE_URL:-https://pcms.live}
        - AUTH0_ISSUER_BASE_URL=${AUTH0_ISSUER_BASE_URL:-https://pcms.ca.auth0.com}
        - AUTH0_DOMAIN=${AUTH0_DOMAIN:-pcms.ca.auth0.com}
        - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID:-H5QKkdL5wsGPvdY6FEFGVmuBQCKKzSV7}
        - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET:-CMxpx4HmEMsTohty_ID6oP9iG9kJEXp8h4lEyeZlcont7hbpQddg1WIAznIhnlfH}
        - AUTH0_SECRET=${AUTH0_SECRET:-vdkr2aiRWVVVdbEZgNqZbFXnR7K0kty4/gkU4G1McK9CKRbZiDEUldS5pCjdm6bZ}
        - JWT_SECRET=uhZ6biZK5PkeLMeJqoVVCgfWGLRwLPkLHi9vwKPMBCU=
        - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
        - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
        - NEXT_PUBLIC_MEDIA_URL=${NEXT_PUBLIC_MEDIA_URL:-https://pcms.live}
    container_name: nextjs-frontend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://pcms.live}
      - NEXT_PRIVATE_API_URL=${NEXT_PRIVATE_API_URL:-http://backend:8000}
      - NEXT_PUBLIC_MEDIA_URL=${NEXT_PUBLIC_MEDIA_URL:-https://pcms.live}
      - API_URL=${API_URL:-http://backend:8000}
      - APP_BASE_URL=${APP_BASE_URL:-https://pcms.live}
      - APP_BASE_URL=${APP_BASE_URL:-https://pcms.live}
      - AUTH0_BASE_URL=${AUTH0_BASE_URL:-https://pcms.live}
      - AUTH0_ISSUER_BASE_URL=${AUTH0_ISSUER_BASE_URL:-https://pcms.ca.auth0.com}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN:-pcms.ca.auth0.com}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID:-H5QKkdL5wsGPvdY6FEFGVmuBQCKKzSV7}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET:-CMxpx4HmEMsTohty_ID6oP9iG9kJEXp8h4lEyeZlcont7hbpQddg1WIAznIhnlfH}
      - AUTH0_SECRET=${AUTH0_SECRET:-vdkr2aiRWVVVdbEZgNqZbFXnR7K0kty4/gkU4G1McK9CKRbZiDEUldS5pCjdm6bZ}
      - JWT_SECRET=uhZ6biZK5PkeLMeJqoVVCgfWGLRwLPkLHi9vwKPMBCU=
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - NODE_ENV=production
      - DATABASE_URL=postgresql://mylubd_user:Sqreele1234@db:5432/mylubd_db
    volumes:
      - ./frontend/Lastnext/prisma:/app/prisma
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - db
    networks:
      - app-network

  backend:
    build: 
      context: ./backend/myLubd
      dockerfile: Dockerfile
    container_name: django-backend
    restart: unless-stopped
    volumes:
      - ./backend/myLubd/src:/app/src
      - static_volume:/app/static
      - media_volume:/app/media
      - backup_volume:/root/my_project/backend/backups
    environment:
      - DJANGO_SETTINGS_MODULE=myLubd.settings  # ✅ Fixed the incorrect setting
      - PYTHONPATH=/app  
      - JWT_SECRET=uhZ6biZK5PkeLMeJqoVVCgfWGLRwLPkLHi9vwKPMBCU=
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://pcms.live}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - AUTH0_ISSUER_BASE_URL=${AUTH0_ISSUER_BASE_URL}
      - AUTH0_ISSUER=${AUTH0_ISSUER}
      - DEBUG=0
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1] pcms.live www.pcms.live django-backend
      - DJANGO_CORS_ORIGINS=https://pcms.live
      - SQL_ENGINE=django.db.backends.postgresql
      - SQL_DATABASE=${POSTGRES_DB:-mylubd_db}
      - SQL_USER=${POSTGRES_USER:-mylubd_user}
      - SQL_PASSWORD=${POSTGRES_PASSWORD:-Sqreele1234}
      - SQL_HOST=db
      - SQL_PORT=5432
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-mylubd_user}:${POSTGRES_PASSWORD:-Sqreele1234}@db:5432/${POSTGRES_DB:-mylubd_db}?schema=public
    healthcheck:
      test: ["CMD", "python", "-c", "import http.client; conn = http.client.HTTPConnection('localhost:8000'); conn.request('GET', '/api/v1/health/'); response = conn.getresponse(); exit(0 if response.status == 200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    expose:
      - "8000"
    depends_on:
      - db
    networks:
      - app-network

  db:
    image: postgres:13-alpine
    container_name: db
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mylubd_db}
      - POSTGRES_USER=${POSTGRES_USER:-mylubd_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-Sqreele1234}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mylubd_user} -d ${POSTGRES_DB:-mylubd_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"  # This exposes the port to the host machine
    expose:
      - "5432" 
    networks:
      - app-network

  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/cloudflare.conf:/etc/nginx/cloudflare.conf:ro
      - ./nginx/letsencrypt:/etc/letsencrypt:ro
      - ./nginx/certbot:/var/www/certbot:ro
      - static_volume:/usr/share/nginx/html/static:ro
      - media_volume:/usr/share/nginx/html/media:ro
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./nginx/letsencrypt:/etc/letsencrypt
      - ./nginx/certbot:/var/www/certbot
    environment:
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-admin@pcms.live}
    depends_on:
      - nginx
    entrypoint: "/bin/sh"
    command: -c 'echo "0 0,12 * * * certbot renew --quiet" | crontab - && crond -f'
    networks:
      - app-network

networks:
  app-network:
    name: pcms_network
    driver: bridge

volumes:
  postgres_data:
    driver: local
    name: pcms_postgres_data
  static_volume:
    driver: local
    name: pcms_static_volume
  media_volume:
    driver: local
    name: pcms_media_volume
  backup_volume:  # ✅ Backup Volume Added
    driver: local
    name: pcms_backup_volume
