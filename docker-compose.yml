version: '3.8'
services:
  frontend:
    build:
      context: ./frontend/Lastnext
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PRIVATE_API_URL: ${NEXT_PRIVATE_API_URL}
        API_URL: ${API_URL}
        APP_BASE_URL: ${APP_BASE_URL}
        NEXT_PUBLIC_AUTH0_BASE_URL: ${NEXT_PUBLIC_AUTH0_BASE_URL}
        NEXT_PUBLIC_AUTH0_ISSUER_BASE_URL: ${NEXT_PUBLIC_AUTH0_ISSUER_BASE_URL}
        NEXT_PUBLIC_AUTH0_DOMAIN: ${NEXT_PUBLIC_AUTH0_DOMAIN}
        NEXT_PUBLIC_AUTH0_CLIENT_ID: ${NEXT_PUBLIC_AUTH0_CLIENT_ID}
        NEXT_PUBLIC_AUTH0_AUDIENCE: ${NEXT_PUBLIC_AUTH0_AUDIENCE}
        NEXT_PUBLIC_MEDIA_URL: ${NEXT_PUBLIC_MEDIA_URL}
    container_name: nextjs-frontend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PRIVATE_API_URL: ${NEXT_PRIVATE_API_URL}
      NEXT_PUBLIC_MEDIA_URL: ${NEXT_PUBLIC_MEDIA_URL}
      API_URL: ${API_URL}
      APP_BASE_URL: ${APP_BASE_URL}
      # Auth0 runtime envs required by @auth0/nextjs-auth0
      AUTH0_BASE_URL: ${AUTH0_BASE_URL}
      AUTH0_ISSUER_BASE_URL: ${AUTH0_ISSUER_BASE_URL}
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      AUTH0_SECRET: ${AUTH0_SECRET}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      # Public copies for client
      NEXT_PUBLIC_AUTH0_BASE_URL: ${NEXT_PUBLIC_AUTH0_BASE_URL:-${AUTH0_BASE_URL}}
      NEXT_PUBLIC_AUTH0_ISSUER_BASE_URL: ${NEXT_PUBLIC_AUTH0_ISSUER_BASE_URL:-${AUTH0_ISSUER_BASE_URL}}
      NEXT_PUBLIC_AUTH0_DOMAIN: ${NEXT_PUBLIC_AUTH0_DOMAIN:-${AUTH0_DOMAIN}}
      NEXT_PUBLIC_AUTH0_CLIENT_ID: ${NEXT_PUBLIC_AUTH0_CLIENT_ID:-${AUTH0_CLIENT_ID}}
      NEXT_PUBLIC_AUTH0_AUDIENCE: ${NEXT_PUBLIC_AUTH0_AUDIENCE:-${AUTH0_AUDIENCE}}
      JWT_SECRET: ${JWT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - db
    networks:
      - app-network

  # ✅ PERFORMANCE OPTIMIZATION: Redis cache service for improved performance
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  backend:
    build: 
      context: ./backend/myLubd
      dockerfile: Dockerfile
    container_name: django-backend
    restart: unless-stopped
    volumes:
      - ./backend/myLubd/src:/app/src
      - static_volume:/app/static
      - media_volume:/app/media
      - backup_volume:/root/my_project/backend/backups
    env_file:
      - .env
    environment:
      DJANGO_SETTINGS_MODULE: myLubd.settings
      PYTHONPATH: /app
      DEBUG: 1
      DJANGO_ALLOWED_HOSTS: localhost 127.0.0.1 [::1] ${DOMAIN} www.${DOMAIN} django-backend backend
      DJANGO_CORS_ORIGINS: https://${DOMAIN}
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_ISSUER: ${AUTH0_ISSUER}
      AUTH0_ISSUER_BASE_URL: ${AUTH0_ISSUER_BASE_URL}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      AUTH0_SECRET: ${AUTH0_SECRET}
      SQL_ENGINE: django.db.backends.postgresql
      SQL_DATABASE: ${SQL_DATABASE}
      SQL_USER: ${SQL_USER}
      SQL_PASSWORD: ${SQL_PASSWORD}
      SQL_HOST: ${SQL_HOST}
      SQL_PORT: ${SQL_PORT}
      # Also pass Postgres vars so Django can fall back if SQL_* are unset
      POSTGRES_DB: ${POSTGRES_DB:-mylubd_db}
      POSTGRES_USER: ${POSTGRES_USER:-mylubd_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mylubd_password}
      POSTGRES_HOST: ${POSTGRES_HOST:-db}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      # Email/Gmail configuration
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS}
      EMAIL_USE_SSL: ${EMAIL_USE_SSL}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL}
      SERVER_EMAIL: ${SERVER_EMAIL}
      EMAIL_REQUIRE_AUTH: ${EMAIL_REQUIRE_AUTH}
      # Gmail API (OAuth2) optional
      GMAIL_CLIENT_ID: ${GMAIL_CLIENT_ID}
      GMAIL_CLIENT_SECRET: ${GMAIL_CLIENT_SECRET}
      GMAIL_REFRESH_TOKEN: ${GMAIL_REFRESH_TOKEN}
      # ✅ PERFORMANCE OPTIMIZATION: Redis cache configuration
      REDIS_URL: redis://redis:6379/1
    healthcheck:
      test: ["CMD", "python", "-c", "import http.client; conn = http.client.HTTPConnection('localhost:8000'); conn.request('GET', '/api/v1/health/'); response = conn.getresponse(); exit(0 if response.status == 200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
    expose:
      - "8000"
    depends_on:
      - db
      - redis  # ✅ Add Redis dependency for caching
    networks:
      - app-network

  db:
    image: postgres:13-alpine
    container_name: db
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mylubd_db}
      POSTGRES_USER: ${POSTGRES_USER:-mylubd_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mylubd_password}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    expose:
      - "5432" 
    networks:
      - app-network

  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/cloudflare.conf:/etc/nginx/cloudflare.conf:ro
      - ./nginx/letsencrypt:/etc/letsencrypt:ro
      - ./nginx/certbot:/var/www/certbot:ro
      - static_volume:/usr/share/nginx/html/static:ro
      - media_volume:/usr/share/nginx/html/media:ro
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./nginx/letsencrypt:/etc/letsencrypt
      - ./nginx/certbot:/var/www/certbot
    env_file:
      - .env
    entrypoint: "/bin/sh"
    command: -c 'echo "0 0,12 * * * certbot renew --quiet" | crontab - && crond -f'
    depends_on:
      - nginx
    networks:
      - app-network

networks:
  app-network:
    name: pcms_network
    driver: bridge

volumes:
  postgres_data:
    driver: local
    name: pcms_postgres_data
  # ✅ PERFORMANCE OPTIMIZATION: Redis data volume for caching
  redis_data:
    driver: local
    name: pcms_redis_data
  static_volume:
    driver: local
    name: pcms_static_volume
  media_volume:
    driver: local
    name: pcms_media_volume
  backup_volume:
    driver: local
    name: pcms_backup_volume
